name: 🏷️ Auto-assign Labels

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  auto-label:
    name: Auto-assign Labels
    runs-on: ubuntu-latest
    steps:
      - name: Auto-assign labels based on content
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            const isPR = !!context.payload.pull_request;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const labels = [];
            
            // Auto-assign type labels based on title/body content
            if (title.includes('[bug]') || title.includes('bug') || body.includes('bug') || title.includes('fix')) {
              labels.push('type: bug');
            } else if (title.includes('[feature]') || title.includes('feature') || body.includes('feature')) {
              labels.push('type: feature');
            } else if (title.includes('[task]') || title.includes('task')) {
              labels.push('type: task');
            } else if (title.includes('doc') || body.includes('documentation')) {
              labels.push('type: documentation');
            } else if (title.includes('security') || body.includes('security')) {
              labels.push('type: security');
            } else if (title.includes('performance') || body.includes('performance')) {
              labels.push('type: performance');
            }
            
            // Auto-assign component labels
            if (body.includes('frontend') || body.includes('ui') || body.includes('component')) {
              labels.push('component: frontend');
            }
            if (body.includes('backend') || body.includes('api') || body.includes('server')) {
              labels.push('component: backend');
            }
            if (body.includes('database') || body.includes('db') || body.includes('sql')) {
              labels.push('component: database');
            }
            if (body.includes('ci/cd') || body.includes('deployment') || body.includes('infrastructure')) {
              labels.push('component: infrastructure');
            }
            if (body.includes('test') || body.includes('testing')) {
              labels.push('component: testing');
            }
            
            // Auto-assign priority labels based on keywords
            if (title.includes('critical') || title.includes('urgent') || body.includes('critical')) {
              labels.push('priority: critical');
            } else if (title.includes('high') || body.includes('high priority')) {
              labels.push('priority: high');
            } else if (title.includes('low') || body.includes('low priority')) {
              labels.push('priority: low');
            } else {
              labels.push('priority: medium');
            }
            
            // Auto-assign status labels
            if (!isPR) {
              labels.push('status: triage');
            }
            
            // Special labels
            if (body.includes('good first issue') || title.includes('good first issue')) {
              labels.push('good first issue');
            }
            if (body.includes('help wanted') || title.includes('help wanted')) {
              labels.push('help wanted');
            }
            if (title.includes('breaking') || body.includes('breaking change')) {
              labels.push('breaking change');
            }
            
            // Apply labels if any were identified
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }